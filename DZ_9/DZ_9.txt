import os
from idlelib import query

from dotenv import load_dotenv
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

load_dotenv()
storage = MemoryStorage()

bot = Bot(token=os.getenv("API_TOKEN"))
dp = Dispatcher(bot=bot, storage=storage)

count = 1


class GameRPG(StatesGroup):
    game1 = State()
    game2 = State()
    game3 = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç @{message.from_user.username}"
        f"\n–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è RPG –∏–≥—Ä–∞ üëæ\n"
        f"\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /play_game ü§ñ"
    )


@dp.message_handler(commands=['play_game'])
async def play_game(message: types.Message):
    global count

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(
            text=f"–ó–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é Priory: {count} üöò",
            callback_data='play_start'
        )
    )

    await message.answer(
        "–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ZAGA, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—à—å—à–µ Prior üöò\n"
        "–ß—Ç–æ–±—ã –±—ã—Ç—å –∫—Ä—É—Ç—ã–º",
        reply_markup=markup
    )

    await GameRPG.game1.set()


@dp.callback_query_handler(state=GameRPG.game1)
async def callback_query(call, state: FSMContext):
    global count

    if call.data == 'play_start':

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text='–û—Ç–¥–∞—Ç—å Priory {} üóø'.format(count),
            callback_data='play_start_1'
        )
        btn2 = types.InlineKeyboardButton(
            text='–°—Ä–∞–∑–∏—Ç—å—Å—è –∑–∞ Priory üöòüí™',
            callback_data='play_start_2'
        )
        markup.add(
            btn1,
            btn2
        )

        await call.message.answer(
            "–£ –≤–∞—Å –Ω–∞ –ø—É—Ç–∏ –ø–æ—è–≤–∏–ª—Å—è –∑–ª–æ–¥–µ–π! –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=markup
        )

        await GameRPG.next()


@dp.callback_query_handler(state=GameRPG.game2)
async def callback_query(call, state: FSMContext):
    global count

    if call.data == 'play_start_1':
        count -= 1

        await state.finish()

        await call.message.answer(
            "–ù—É —Ç—ã –∏ –∫–æ–Ω–µ—á–Ω–æ üóø –∏—Å–ø—É–≥–∞–ª—Å—è, –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ—é Priory üöò\n"
            "–£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å: {} Prior üöò".format(count)
        )
        count += 1

    elif call.data == 'play_start_2':
        count += 200

        await call.message.answer("–ê–π –•–ê–†–û–®!!\n–¢—ã –∑–∞–±—Ä–∞–ª —É –Ω–µ–≥–æ 200 Prior üöò, —Ç—ã –≤ –ø–ª—é—Å–µ! üí™üí™")

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                text="–û—Ç–¥–∞—Ç—å –Ω–∞ —É—á—ë–±—É –≤ Synergy 199 Prior –∏–∑ {}üöò".format(count),
                callback_data='play_start_3_finish'
            )
        )

        await call.message.answer(
            "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ Priorami üöò",
            reply_markup=markup
        )

        await GameRPG.next()


@dp.callback_query_handler(state=GameRPG.game3)
async def callback_query(call, state: FSMContext):
    global count

    if call.data == 'play_start_3_finish':
        await state.finish()
        count -= 199

        await call.message.answer(
            "–í—ã —Ç–µ–ø–µ—Ä—å –æ–±—É—á–∞–µ—Ç–µ—Å—å –≤ Synergy! üí™\n"
            "–£ –≤–∞—Å {} Priors üöò –ö–∞—Ç–∞–π—Ç–µ—Å—å –∏ —É—á–∏—Ç–µ—Å—å –æ—Ç–¥—É—à–∏, –£–î–ê–ß–ò!".format(count)
        )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
